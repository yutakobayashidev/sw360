<%--
  ~ Copyright Siemens AG, 2013-2017, 2019. Part of the SW360 Portal Project.
  ~
  ~ This program and the accompanying materials are made
  ~ available under the terms of the Eclipse Public License 2.0
  ~ which is available at https://www.eclipse.org/legal/epl-2.0/
  ~
  ~ SPDX-License-Identifier: EPL-2.0
  --%>

<%--
    Description:            Table of attachments to be edited for a document

    Required Imports:       - org.eclipse.sw360.portal.common.PortalConstants
                            - org.eclipse.sw360.datahandler.thrift.attachments.Attachment
                            - org.eclipse.sw360.datahandler.thrift.components.Release
                            - org.eclipse.sw360.datahandler.thrift.attachments.CheckStatus

    Required Beans:         - documentID
                            - documentType

    Required variables:     - hasWritePermissions

    Required Stylesheets:   - jquery-ui

    Included JSPFs:         - utils/includes/attachmentsUpload
--%>
<portlet:resourceURL var="attachmentListAjaxURL">
    <portlet:param name="<%=PortalConstants.ACTION%>" value='<%=PortalConstants.ATTACHMENT_LIST%>'/>
    <portlet:param name="<%=PortalConstants.DOCUMENT_ID%>" value="${documentID}"/>
    <portlet:param name="<%=PortalConstants.DOCUMENT_TYPE%>" value="${documentType}"/>
</portlet:resourceURL>

<table id="attachmentInfo" class="table edit-table attachments" title="<liferay-ui:message key="attachment.information" /> ${documentType}"
  data-ajax-url="<%=attachmentListAjaxURL%>"
  data-input-filename-name="<portlet:namespace/><%=Release._Fields.ATTACHMENTS%><%=Attachment._Fields.FILENAME%>"
  data-input-content-id-name="<portlet:namespace/><%=Release._Fields.ATTACHMENTS%><%=Attachment._Fields.ATTACHMENT_CONTENT_ID%>"
  data-input-type-name="<portlet:namespace/><%=Release._Fields.ATTACHMENTS%><%=Attachment._Fields.ATTACHMENT_TYPE%>"
  data-input-created-comment-name="<portlet:namespace/><%=Release._Fields.ATTACHMENTS%><%=Attachment._Fields.CREATED_COMMENT%>"
  data-input-check-status-name="<portlet:namespace/><%=Release._Fields.ATTACHMENTS%><%=Attachment._Fields.CHECK_STATUS%>"
  data-input-checked-comment-name="<portlet:namespace/><%=Release._Fields.ATTACHMENTS%><%=Attachment._Fields.CHECKED_COMMENT%>">
    <colgroup>
        <col style="width: 16%;" />
        <col style="width: 12%;" />
        <col style="width: 12%;" />
        <col style="width:  6%;" />
        <col style="width:  6%;" />
        <col style="width:  6%;" />
        <col style="width: 12%;" />
        <col style="width: 12%;" />
        <col style="width:  6%;" />
        <col style="width:  6%;" />
        <col style="width:  6%;" />
        <col/> <!-- width set by css rules -->
    </colgroup>
    <thead>
        <tr>
            <th class="headLabel" colspan="12"><liferay-ui:message key="attachments" /></th>
        </tr>
        <tr>
            <th class="headlabel" rowspan="2"><liferay-ui:message key="filename" /></th>
            <th class="headlabel" rowspan="2"><liferay-ui:message key="type" /></th>
            <th class="headlabel" colspan="4"><liferay-ui:message key="upload" /></th>
            <th class="headlabel" colspan="5"><liferay-ui:message key="approval" /></th>
            <th class="headlabel" rowspan="2"></th>
        </tr>
        <tr>
            <!-- Uploader -->
            <th class="headlabel"><liferay-ui:message key="comment" /></th>
            <th class="headlabel"><liferay-ui:message key="group" /></th>
            <th class="headlabel"><liferay-ui:message key="name" /></th>
            <th class="headlabel"><liferay-ui:message key="date" /></th>
            <!-- Approver -->
            <th class="headlabel"><liferay-ui:message key="status" /></th>
            <th class="headlabel"><liferay-ui:message key="comment" /></th>
            <th class="headlabel"><liferay-ui:message key="group" /></th>
            <th class="headlabel"><liferay-ui:message key="name" /></th>
            <th class="headlabel"><liferay-ui:message key="date" /></th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<button id="upload-attachment-button" type="button" class="btn btn-secondary mt-3"><liferay-ui:message key="add.attachment" /></button>

<%@include file="/html/utils/includes/attachmentsUpload.jspf" %>

<script>
    require(['jquery', 'utils/includes/attachmentsUpload', 'modules/dialog', 'bridges/datatables'], function($, attachmentUploader, dialog, datatables) {
        var attachmentTable,
            config = $('#attachmentInfo').data();

        attachmentUploader.initialize();

        // initialization
        attachmentTable = datatables.create('#attachmentInfo', {
            ajax: {
                url: config.ajaxUrl,
                dataSrc: "data"
            },
            rowId: 'attachmentContentId',
            dom: "rti",
            paging: false,
            autoWidth: false,
            columns: [
              /*  0 */ { data: "filename", render: renderFilename, className: 'content-middle' },
              /*  1 */ { data: "attachmentType", render: $.fn.dataTable.render.inputSelect('attachmentTypes', config.inputTypeName, 'attachmentType toplabelledInput', 'textlabel stackedLabel') },
              /*  2 */ { data: "createdComment", defaultContent: "", render: $.fn.dataTable.render.inputText(config.inputCreatedCommentName, 'toplabelledInput', 'Enter comments') },
              /*  3 */ { data: "createdTeam", defaultContent: "", render: $.fn.dataTable.render.ellipsis, className: 'content-middle' },
              /*  4 */ { data: "createdBy", defaultContent: "", render: $.fn.dataTable.render.ellipsis, className: 'content-middle'  },
              /*  5 */ { data: "createdOn", defaultContent: "", className: 'content-middle' },
              /*  6 */ { data: "checkStatus", render: $.fn.dataTable.render.inputSelect('checkStatuses', config.inputCheckStatusName, 'toplabelledInput', 'textlabel stackedLabel'), className: 'checkStatus' },
              /*  7 */ { data: "checkedComment", defaultContent: "", render: $.fn.dataTable.render.inputText(config.inputCheckedCommentName, 'toplabelledInput check-comment', 'Enter comments',
                                                      function(value, type, row, meta) {
                                                          if(row.checkStatus == 0) {
                                                              this.attr('readonly', 'readonly');
                                                          }
                                                      }), className: 'checkedComment'
                         },
              /*  8 */ { data: "checkedTeam", defaultContent: "", render: $.fn.dataTable.render.ellipsis, className: 'content-middle checkedTeam' },
              /*  9 */ { data: "checkedBy", defaultContent: "", render: $.fn.dataTable.render.ellipsis, className: 'content-middle checkedBy' },
              /* 10 */ { data: "checkedOn", defaultContent: "", className: 'content-middle checkedOn' },
              /* 11 */ { data: "actions", orderable: false, render: $.fn.dataTable.render.actions( [{ key: 'attachmentContentId', 'class': 'delete-attachment', icon: 'trash', title: '<liferay-ui:message key="delete.attachment" />', approvalKey: 'checkStatus', usageCountsKey: 'usageCounts'}] ), className: "content-middle one action" }
            ],
            columnDefs: [{
                  targets: 1,
                  createdCell: function(td, cellData, rowData, row, col) {
                      var options = $(td).find('.attachmentType option');
                      $(options[1]).insertBefore($(options[0]));
                      $(options[4]).insertBefore($(options[0]));
                      $(options[5]).insertBefore($(options[0]));
                      $(options[6]).insertBefore($(options[0]));
                      if (!rowData.attachmentType && !rowData.sha1) {
                          $(options[0]).removeAttr('selected');
                          $(options[1]).attr('selected', '');
                      }
                      $.fn.dataTable.render.inputSelect.updateTitle(td);
                      $(td).find('.attachmentType').each(function() {
                          $(this).change(function() {
                              let checkStatus = $(td).parents("tr:first").find(".checkStatus select");
                              let checkedComment = $(td).parents("tr:first").find(".checkedComment input");
                              functionForCheckStatusOfInitialScanType($(this).val(), checkStatus);
                              functionForCheckCommentOfInitialScanType($(this).val(), checkedComment);
                          });
                      });
                  }
            }, {
                targets: 6,
                createdCell: function(td, cellData, rowData, row, col) {
                    $.fn.dataTable.render.inputSelect.updateTitle(td);
                    $(td).find('select').on('change', function(event) {
                        var value = $(event.target).val();
                        if(value == 0) {
                            $(td).parents('tr').find('input.check-comment').attr('readonly', 'readonly');
                            $(td).parents('tr').find('input.check-comment').addClass('foregroundAlert');
                        } else {
                            $(td).parents('tr').find('input.check-comment').removeAttr('readonly');
                            $(td).parents('tr').find('input.check-comment').removeClass('foregroundAlert');
                        }
                    });
                    functionForCheckStatusOfInitialScanType(rowData.attachmentType, $(td).find('select'));
                }
              }, {
                  targets: 2,
                  createdCell: function(td, cellData, rowData, row, col) {
                      $.fn.dataTable.render.inputText.updateTitle(td);
                      $.fn.dataTable.render.inputText.useInputDialog(td, "<liferay-ui:message key="update.create.comment" />");
                  }
            }, {
                  targets: 7,
                  createdCell: function(td, cellData, rowData, row, col) {
                      $.fn.dataTable.render.inputText.updateTitle(td);
                      $.fn.dataTable.render.inputText.useInputDialog(td, "<liferay-ui:message key="update.approval.comment" />");
                      functionForCheckCommentOfInitialScanType(rowData.attachmentType, $(td).find('input'));
                  }
            }],
            order: [[0, 'asc']],
            deferRender: true,
            language: {
                emptyTable: "<liferay-ui:message key="no.attachments.yet" />",
                paginate: {
                    previous: "<liferay-ui:message key="previous" />",
                    next: "<liferay-ui:message key="next" />"
                },
                info: "<liferay-ui:message key="showing" />",
                infoEmpty: "<liferay-ui:message key="infoempty" />",
                processing: "<liferay-ui:message key="processing" />",
                loadingRecords: "<liferay-ui:message key="loading" />"
            }
        });

        let functionForCheckStatusOfInitialScanType = function (attachmentType, checkStatus) {
            if (attachmentType == "19") {
                checkStatus.val("0").change();
                checkStatus.attr("disabled", true);
            } else {
                checkStatus.attr("disabled", false);
            }
        }

        let functionForCheckCommentOfInitialScanType = function (attachmentType, checkedComment) {
            if (attachmentType == "19") {
                checkedComment.val("").change();
                checkedComment.attr("disabled", true);
            } else {
                checkedComment.attr("disabled", false);
            }
        }

        // register event handlers
        $('#upload-attachment-button').on('click', function() {
            attachmentUploader.showUploadDialog(function(addedAttachment) {
                attachmentTable.row.add(addedAttachment).draw(false);
                $(attachmentTable.row('#' + addedAttachment.attachmentContentId).node()).find('td').addClass('added');
            });
        });

        $('#attachmentInfo').on('click', 'svg.delete-attachment', function(event) {
            var data = $(event.currentTarget).data();
            var warningMessage;
            var usagesCount = data.usagesCount;
            if(data.approvalstate == <%=CheckStatus.ACCEPTED.getValue()%>) {
                warningMessage = "<p><liferay-ui:message key="an.attachment.cannot.be.deleted.while.it.is.approved.you.have.to.reject.the.approval.first" /></p>";
                <core_rt:if test="${hasWritePermissions == false}">
                warningMessage += "<p><liferay-ui:message key="for.this.you.have.to.create.a.moderation.request" /></p>";
                </core_rt:if>
                displayDeleteNotAllowedWarning(warningMessage);
            } else if (typeof usagesCount === 'number' && usagesCount !== 0){
                warningMessage = "<p><liferay-ui:message key="an.attachment.cannot.be.deleted.while.it.is.used.by.some.projects.you.have.to.delete.the.usages.first" /></p>";
                displayDeleteNotAllowedWarning(warningMessage);
            } else {
                deleteAttachment(data.key);
            }
        });

        // helper methods
        function renderFilename(filename, type, row) {
            if(type === 'display') {
                return filename +
                    $('<input>', { name: config.inputFilenameName, type: 'hidden', value: filename })[0].outerHTML +
                    $('<input>', { name: config.inputContentIdName, type: 'hidden', value: row.attachmentContentId })[0].outerHTML;
            } else {
                return filename;
            }
        }

        function deleteAttachment(attachmentId) {
            var row = attachmentTable.row('#' + attachmentId),
                attachmentName = row.data().filename;

            dialog.confirm('danger', 'question-circle', '<liferay-ui:message key="delete.attachment" />?', '<p><liferay-ui:message key="do.you.really.want.to.delete.attachment.x" />(<b data-name="id"></b>)?</p>', '<liferay-ui:message key="delete.attachment" />', {
                name: attachmentName,
                id: attachmentId
            }, function(submit, callback) {
                row.remove().draw(false);
                callback(true);
            });
        }

        function displayDeleteNotAllowedWarning(warningMessage) {
            dialog.warn(warningMessage);
        }
    });
</script>
