<%--
  ~ Copyright Siemens AG, 2013-2019. Part of the SW360 Portal Project.
  ~
  ~ This program and the accompanying materials are made
  ~ available under the terms of the Eclipse Public License 2.0
  ~ which is available at https://www.eclipse.org/legal/epl-2.0/
  ~
  ~ SPDX-License-Identifier: EPL-2.0
--%>
<%@include file="/html/init.jsp"%>

<%@ page import="com.liferay.portal.kernel.portlet.PortletURLFactoryUtil" %>
<%@ page import="javax.portlet.PortletRequest"%>
<%@ page import="org.eclipse.sw360.datahandler.thrift.projects.Project"%>
<%@ page import="org.eclipse.sw360.datahandler.thrift.ObligationStatus" %>
<%@ page import="org.eclipse.sw360.portal.common.PortalConstants"%>
<%@ page import="org.eclipse.sw360.datahandler.thrift.licenses.ObligationLevel"%>
<%@ page import="org.eclipse.sw360.datahandler.thrift.licenses.ObligationType"%>

<portlet:resourceURL var="deleteOrphanObligationURL">
    <portlet:param name="<%=PortalConstants.ACTION%>" value='<%=PortalConstants.REMOVE_ORPHAN_OBLIGATION%>'/>
    <portlet:param name="<%=PortalConstants.OBLIGATION_ID%>" value="${requestScope.obligationData.id}"/>
</portlet:resourceURL>

<portlet:resourceURL var="licenseObligationUrl">
    <portlet:param name="<%=PortalConstants.ACTION%>" value="<%=PortalConstants.LOAD_LICENSE_OBLIGATIONS%>"/>
    <portlet:param name="<%=PortalConstants.DOCUMENT_ID%>" value="${requestScope.projectid}"/>
</portlet:resourceURL>

<%-- <core_rt:set var="obligationsActionSet" value='<%=PortalConstants.PROJECT_OBLIGATIONS_ACTION_SET%>'/> --%>

<ul class="nav nav-tabs font-weight-bold border-bottom" role="tablist">
    <li class="nav-item border rounded border-bottom-0">
        <a class="nav-link active" id="licObl-tab" data-toggle="tab" href="#licObl" role="tab" aria-controls="licObl" aria-selected="true"><liferay-ui:message key="license.obligation" /></a>
    </li>
    <li class="nav-item border rounded border-bottom-0">
        <a class="nav-link" id="compObl-tab" data-toggle="tab" href="#compObl" role="tab" aria-controls="compObl" aria-selected="false"><liferay-ui:message key="component.obligation" /></a>
    </li>
    <li class="nav-item border rounded border-bottom-0">
        <a class="nav-link" id="projObl-tab" data-toggle="tab" href="#projObl" role="tab" aria-controls="projObl" aria-selected="false"><liferay-ui:message key="project.obligation" /></a>
    </li>
    <li class="nav-item border rounded border-bottom-0">
        <a class="nav-link" id="orgObl-tab" data-toggle="tab" href="#orgObl" role="tab" aria-controls="orgObl" aria-selected="false"><liferay-ui:message key="organisation.obligation" /></a>
    </li>
</ul>


<!-- Obligation Edit -->
<div class="tab-content">
<div class="tab-pane fade show active" id="licObl" role="tabpanel" aria-labelledby="licObl-tab">
<div id="obligation-edit">
    <table id="editObligationsTable" class="table table-bordered" >
        <colgroup>
            <col />
            <col style="width: 25%;" />
            <col style="width: 15%;" />
            <col style="width: 15%;" />
            <col style="width: 10%;" />
            <col style="width: 10%;" />
            <col style="width: 10%;" />
            <!-- <col style="width: 15%;" /> -->
            <col style="width: 15%;" />
            <col />
        </colgroup>
        <thead>
            <tr>
                <th class="more-info">
                    <span title="Expand all" data-show="false">&#x25BA</span>
                </th>
                <th>
                    <span title="<liferay-ui:message key="ObligationLevel-LICENSE_OBLIGATION" />"><liferay-ui:message key="license.obligation" /> <clay:icon symbol="info-circle" /></span>
                </th>
                <th><liferay-ui:message key="licenses" /></th>
                <th><liferay-ui:message key="releases" /></th>
                <th><liferay-ui:message key="status" /></th>
                <th><liferay-ui:message key="type" /></th>
                <th><liferay-ui:message key="id" /></th>
                <!-- Commented code for obligation action, until action select options are provided -->
                <!-- <th>Action</th> -->
                <th><liferay-ui:message key="comment" /></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
</div>
<!-- Comp Obligation View -->
<div class="tab-pane fade" id="compObl" role="tabpanel" aria-labelledby="compObl-tab">
<div id="comp-obligation-edit">
    <table id="comp-editObligationsTable" class="table table-bordered" >
        <colgroup>
            <col />
            <col style="width: 35%;" />
            <col style="width: 14%;" />
            <col style="width: 14%;" />
            <col style="width: 12%;" />
            <col style="width: 35%;" />
            <col />
        </colgroup>
        <thead>
            <tr>
                <th class="comp-more-info">
                    <span title="<liferay-ui:message key="expand.all" />" data-show="false">&#x25BA</span>
                </th>
                <th>
                    <span title="<liferay-ui:message key="ObligationLevel-COMPONENT_OBLIGATION" />"><liferay-ui:message key="component.obligation" /> <clay:icon symbol="info-circle" /></span>
                </th>
                <th><liferay-ui:message key="status" /></th>
                <th><liferay-ui:message key="type" /></th>
                <th><liferay-ui:message key="id" /></th>
                <th><liferay-ui:message key="comment" /></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
</div>
<!-- Project Obligation View -->
<div class="tab-pane fade" id="projObl" role="tabpanel" aria-labelledby="projObl-tab">
<div id="project-obligation-edit">
    <table id="project-editObligationsTable" class="table table-bordered" >
        <colgroup>
            <col />
            <col style="width: 35%;" />
            <col style="width: 14%;" />
            <col style="width: 14%;" />
            <col style="width: 12%;" />
            <col style="width: 35%;" />
            <col />
        </colgroup>
        <thead>
            <tr>
                <th class="project-more-info">
                    <span title="<liferay-ui:message key="expand.all" />" data-show="false">&#x25BA</span>
                </th>
                <th>
                    <span title="<liferay-ui:message key="ObligationLevel-PROJECT_OBLIGATION" />"><liferay-ui:message key="project.obligation" /> <clay:icon symbol="info-circle" /></span>
                </th>
                <th><liferay-ui:message key="status" /></th>
                <th><liferay-ui:message key="type" /></th>
                <th><liferay-ui:message key="id" /></th>
                <th><liferay-ui:message key="comment" /></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
</div>
<!-- Org Obligation View -->
<div class="tab-pane fade" id="orgObl" role="tabpanel" aria-labelledby="orgObl-tab">
<div id="org-obligation-edit">
    <table id="org-editObligationsTable" class="table table-bordered" >
        <colgroup>
            <col />
            <col style="width: 35%;" />
            <col style="width: 14%;" />
            <col style="width: 14%;" />
            <col style="width: 12%;" />
            <col style="width: 35%;" />
            <col />
        </colgroup>
        <thead>
            <tr>
                <th class="org-more-info">
                    <span title="<liferay-ui:message key="expand.all" />" data-show="false">&#x25BA</span>
                </th>
                <th>
                    <span title="<liferay-ui:message key="ObligationLevel-ORGANISATION_OBLIGATION" />"><liferay-ui:message key="organisation.obligation" /> <clay:icon symbol="info-circle" /></span>
                </th>
                <th><liferay-ui:message key="status" /></th>
                <th><liferay-ui:message key="type" /></th>
                <th><liferay-ui:message key="id" /></th>
                <th><liferay-ui:message key="comment" /></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
</div>
</div>

<div id="spinnerForLicenseObligation" class="d-none">
    <div id="spinnerElem" style="max-height:60vh">
       <%@ include file="/html/utils/includes/pageSpinner.jspf" %>
    </div>
</div>
<script>
require(['jquery', 'bridges/datatables', 'utils/render', 'modules/button', 'modules/dialog'], function ($, datatables, render, button, dialog) {
    let obligationJSON = [],
        projectObligationJSON = [],
        compObligationJSON = [],
        orgObligationJSON = [],
        licenseLinks,
        releaseLinks,
        dataMap = new Map(),
        projectDataMap = new Map(),
        compDataMap = new Map(),
        orgDataMap = new Map(),
        actionOptions = {};
    var jsonObject = {},
        obligationsFromLicenseDatabase = "",
        licenseTableData=$("#spinnerForLicenseObligation").html().toString();
    $("#spinnerForLicenseObligation").remove();
    <core_rt:forEach items="${obligationsActionSet}" var="action">
        actionOptions['${action}'] = '${action}';
    </core_rt:forEach>

    /* Print all attachment table data as array into the html page */
    <core_rt:forEach items="${obligationData.linkedObligationStatus}" var="entry" varStatus="loop">
        <core_rt:set var="projectObligations" value="${entry.value}" />
            licenseLinks = [];
            releaseLinks = [];

        <core_rt:forEach items="${projectObligations.licenseIds}" var="licenseId">
           licenseLinks.push("<sw360:out value='${licenseId}'/>");
        </core_rt:forEach >

        <core_rt:if test="${not empty projectObligations.releases}">
            <core_rt:forEach items="${projectObligations.releases}" var="release">
                var fullName = "<sw360:out value='${release.name}'/> (<sw360:out value='${release.version}'/>)";
                releaseLinks.push({
                    id: "${release.id}",
                    name: fullName,
                    attachmentId: "${release.attachments.iterator().next().attachmentContentId}"
	            });
            </core_rt:forEach>
        </core_rt:if>

        var obligText = "<sw360:out value='${projectObligations.text}' stripNewlines='false' jsQuoting='true'/>";
        obligText = obligText.replace(/[\r\n]/g, '<br>');
        obligText = obligText.replace(/\t/g, '&ensp;&ensp;&ensp;&ensp;');
        obligationJSON.push({
            "obligation": "<sw360:out value='${entry.key}'/>",
            "licenseLinks": licenseLinks,
            "releaseLinks": releaseLinks,
            "status": '<sw360:DisplayEnumOptions type="<%=ObligationStatus.class%>" selected="${projectObligations.status}" />',
            /* "action": "${projectObligations.action}", */
            "type": "<sw360:DisplayEnum value='${projectObligations.obligationType}'/>",
            "level": "${projectObligations.obligationLevel}",
            "id": "<sw360:out value='${projectObligations.id}'/>",
            "comment": "<sw360:out value='${projectObligations.comment}'/>",
            "text": '<p style="overflow: auto; max-height: 20rem;">'+obligText+'</p>',
            "modifiedBy": "${projectObligations.modifiedBy}",
            "modifiedOn": "${projectObligations.modifiedOn}"
        });
    </core_rt:forEach >

    /* create table */
    var table = datatables.create('#editObligationsTable', {
        "data": obligationJSON,
        "deferRender": false, // do not change this.
        "columns": [
            {
                "className": 'details-control',
                "data": null,
                "defaultContent": '&#x25BA'
            },
            { "data": function(row) {
                          return $('<span></span>').html(row.obligation).text();
                      }, render: $.fn.dataTable.render.ellipsis
            },
            { "data": "licenseLinks", "render": { display: renderLicenseLink } },
            { "data": "releaseLinks", "render": { display: renderReleaseLink } },
            { "data": "status", "render": { display: renderStatus } },
            /* { "data": "action", render: $.fn.dataTable.render.inputSelect(actionOptions, '', 'obl_action toplabelledInput', 'textlabel stackedLabel') }, */
            { "data": "type", className: 'text-center' },
            { "data": "id", className: 'text-center' },
            { "data": function(row) {
                            return $('<span></span>').html(row.comment).text();
                      }, defaultContent: "", render: $.fn.dataTable.render.inputText('comment', 'obl_comment toplabelledInput', '<liferay-ui:message key="enter.comments" />')
            },
        ],
        "columnDefs": [
            {
                "targets": 0,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('title', 'click the icon to toggle obligation text');
                }
            },
            {
                "targets": 1,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).css('max-width', '15rem');
                }
            },
            {
                "targets": 7,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $.fn.dataTable.render.inputText.updateTitle(td);
                    $.fn.dataTable.render.inputText.useInputDialog(td, "<liferay-ui:message key="enter.obligation.comment" />");
                    $(td).css('max-width', '15rem');
                }
            }
        ],
        "createdRow": function (row, data, dataIndex, cell) {
            if (data.releaseLinks < 1) {
                $(row).addClass('orphan');
                $(row).find("input,select").attr('disabled', true);
                if(!data.text||data.text.length==0){
                    data.text=data.obligation;
                }
            }
            if (data.modifiedBy && data.modifiedOn) {
                $(row).attr('title', '<liferay-ui:message key="modified.by" />: ' + data.modifiedBy + ' | <liferay-ui:message key="modified.on" />: ' + data.modifiedOn);
            }
        },
        "order": [[1, 'asc']],
        "buttons": [
            {
                text: 'Add Obligations from License Database',
                "className": 'btn btn-primary',
                "attr": {
                    "id": 'obligationsFromLicenseDatabase',
                },
                "action": getObligationsFromLicenseDatabase
            },
            {
                "className": 'd-none',
                "attr": {
                    "id": 'updateObligationsButtonHidden',
                    "style": "display: none;"
                },
                "action": updateObligations
            }
        ],
        "initComplete": datatables.showPageContainer
    }, undefined, [0, 4, 7]);

    function renderStatus(status, type, row) {
        return '<select class="obl_status toplabelledInput form-control">' + status + '</select>';
    }

    function renderComment(comment, type, row, meta) {
        return '<textarea class="obl_comment form-control" rows="1" placeholder="<liferay-ui:message key="enter.comment" />">' + comment + '</textarea>';
    }

    function renderReleaseLink(releaseLinks, type, row, meta) {
        if (releaseLinks && releaseLinks.length > 0) {
        let releases = [],
            releasePortletURL = '<%=friendlyReleaseURL%>'.replace(/projects/g, "components");
        for (let i = 0; i < releaseLinks.length; i++) {
            releases[i] = render.linkTo(replaceFriendlyUrlParameter(releasePortletURL.toString(), releaseLinks[i].id, '<%=PortalConstants.PAGENAME_RELEASE_DETAIL%>'), releaseLinks[i].name);
        }
        return render.renderExpandableUrls(releases, '<liferay-ui:message key="release" />', 25);
        } else {
            return getOrphanObligationMessage();
        }
    }

    function getOrphanObligationMessage() {
        return '<span title="<liferay-ui:message key="this.obligation.is.not.associated.with.linked.release" />">' +
            '<liferay-ui:message key="orphaned" /> <svg class="delete lexicon-icon float-right m-1 one action"><title><liferay-ui:message key="delete" /></title><use href="/o/org.eclipse.sw360.liferay-theme/images/clay/icons.svg#trash"/></svg> </span>';
    }

    function renderLicenseLink(licenseLinks, type, row) {
        let licenses = [],
            licensePortletURL = '<%=friendlyLicenseURL%>'.replace(/projects/g, "licenses");
        for (let i = 0; i < licenseLinks.length; i++) {
            licenses[i] = render.linkTo(replaceFriendlyUrlParameter(licensePortletURL.toString(), licenseLinks[i], '<%=PortalConstants.PAGENAME_DETAIL%>'), licenseLinks[i]);
        }
        return render.renderExpandableUrls(licenses, '<liferay-ui:message key="license" />', 21);
    }

    function replaceFriendlyUrlParameter(portletUrl, id, page) {
        return portletUrl
            .replace('<%=PortalConstants.FRIENDLY_URL_PLACEHOLDER_PAGENAME%>', page)
            .replace('<%=PortalConstants.FRIENDLY_URL_PLACEHOLDER_ID%>', id);
    }

    /* Add event listener for change in any editable fields in table */
    $("#editObligationsTable tbody").on("change", 'td select.obl_status', function () {
        storeData($(this));
    });

    /* $("#editObligationsTable tbody").on("change", 'td select.obl_action',function () {
        storeData($(this));
    }); */

    $("#editObligationsTable tbody").on("change", 'td input.obl_comment', function () {
        if ($(this).closest('tr').find("input.obl_comment").val()) {
            storeData($(this));
        }
    });

    function storeData(thisObj) {
        let $tr = thisObj.closest("tr");
        if (!$tr.hasClass('orphan')) {
            // get obligatoin topic/text from second column (index -> 1) in table.
            dataMap.set($.parseHTML($tr.find('td:eq(1)').text())[0].nodeValue, '');
        }
    }

    /* Add event listener for deleting individual obligations */
    $("#editObligationsTable tbody").on("click", 'svg.delete', function () {
        let tr = $(this).closest("tr");
        deleteObligation(tr);
    });

    // delete action
    function deleteObligation(tr) {
        var $dialog,
            topic = $(tr).find('td:eq(1)').text();
        let deleteRowData = table.row(tr).data();
        if(deleteRowData.added||deleteRowData.level=="LICENSE_OBLIGATION"){
            topic = deleteRowData.text;
        }
        function deleteObligationInternal(callback) {
            jQuery.ajax({
                type: 'POST',
                url: '<%=deleteOrphanObligationURL%>',
                cache: false,
                data: {
                    "<portlet:namespace/><%=PortalConstants.OBLIGATION_TOPIC%>": topic
                },
                success: function (data) {
                    callback();
                    if (data.result == 'SUCCESS') {
                        table.row(tr).remove().draw(false);
                        $dialog.close();
                        let count = $('#detailTab #obligtionsCount').text(),
                            fulfilled = count.split(' / ')[0],
                            total = Number(count.split(' / ')[1]) - 1,
                            status = $(tr).find('td select.obl_status option:selected').val();
                        if (status === '1' && Number(fulfilled)) {
                            fulfilled = Number(fulfilled) - 1;
                        }
                        $('#detailTab #obligtionsCount').html(fulfilled + ' / ' + total);
                    }
                    else {
                        $dialog.alert('<liferay-ui:message key="i.could.not.delete.the.obligation" />');
                    }
                },
                error: function () {
                    callback();
                    $dialog.alert('<liferay-ui:message key="failed.to.delete.the.obligation" />');
                }
            });
        }

        $dialog = dialog.confirm('danger', 'question-circle', '<liferay-ui:message key="delete.obligation" />?', '<p><liferay-ui:message key="do.you.really.want.to.delete.the.obligation.x" />?</p>', '<liferay-ui:message key="delete.obligation" />', {
            topic: topic
        }, function(submit, callback) {
            deleteObligationInternal(callback);
        });
    }

    /* Add event listener for opening and closing individual child row */
    $('#editObligationsTable').on('click', 'td.details-control', function () {
        render.toggleChildRow($(this), table);
    });

    /* Add event listener for opening and closing all the child rows */
    $('#editObligationsTable thead').on('click', 'th.more-info', function() {
        render.toggleAllChildRows($(this), table);
    });

    function getObligationsFromLicenseDatabase(event, data, node, config) {
      if (obligationsFromLicenseDatabase.trim().length == 0) {
          $.ajax({
              url: '<%=licenseObligationUrl%>',
              type: "GET",
              success: function(result){
                  $("#spinnerElem").html("").append(result);
          }});
      }
      else {
          licenseTableData = obligationsFromLicenseDatabase;
      }
      dialog.confirm('info', 'check-square', '<liferay-ui:message key="select.license.obligations.to.be.added" />', licenseTableData, '<liferay-ui:message key="add" />', {
      }, function(submit, callback) {
          addLicenseObligation();
          callback(true);
      });
    }

    /* collect all the obligation status */
    function updateObligations(event, data, node, config) {
        let btnData = node.data(),
            date = new Date().toISOString().split('T')[0],
            isDeleteAllOrphanObligations = $('input[name="deleteAllOrphanObligations"]').is(":checked"),
            obligationMap = new Map();

        if (dataMap.size < 1 && !isDeleteAllOrphanObligations) {
            return;
        }

        table.rows().every(function (rowIdx, tableLoop, rowLoop) {
            let rowData = this.data(),
                mapKey = $.parseHTML(rowData.obligation)[0].nodeValue,
                releaseToAcceptedCLIMap = new Map(),
                ids = [];
            for (release of rowData.releaseLinks) {
                releaseToAcceptedCLIMap[release.id] = release.attachmentId;
            }
            let mapValue = {
                licenseIds: rowData.licenseLinks,
                releaseIdToAcceptedCLI: releaseToAcceptedCLIMap
            };
            if (dataMap.has(mapKey)) {
                $node = $(this.node()),
                mapValue.status = $node.find('select.obl_status option:selected').val();
                /* mapValue.action = $node.find("select.obl_action option:selected").val(); */
                mapValue.comment = $node.find("input.obl_comment").val();
                mapValue.modifiedOn = date;
            }

            if (rowData.added || rowData.level == "LICENSE_OBLIGATION") {
                mapValue.obligationLevel = "<%=ObligationLevel.LICENSE_OBLIGATION%>";
                if (rowData.type.trim().length > 0)
                    mapValue.obligationType = rowData.type;
                mapValue.id = rowData.id;
                mapKey = rowData.text;
            }
            obligationMap.set(mapKey, mapValue);
        });

        for (const [key, value] of obligationMap.entries()) {
            jsonObject[key] = value;
        }
        $('#projectEditForm').append('<input id="deleteAllOrphanObligations" type="hidden" name="<portlet:namespace/><%=PortalConstants.DELETE_ALL_ORPHAN_OBLIGATIONS%>"/>');
        $("#deleteAllOrphanObligations").val(isDeleteAllOrphanObligations);
        obligationMap.clear();
    }
    
    
    //project Obligation
    <core_rt:forEach items="${projectLevelObligations}" var="projOblig" varStatus="loop">
    var obligText = "<sw360:out value='${projOblig.value.text}' stripNewlines='false' jsQuoting='true'/>";
    obligText = obligText.replace(/[\r\n]/g, '<br>');
    obligText = obligText.replace(/\t/g, '&ensp;&ensp;&ensp;&ensp;');
    projectObligationJSON.push({
        "obligation": "<sw360:out value='${projOblig.key}'/>",
        "status": '<sw360:DisplayEnumOptions type="<%=ObligationStatus.class%>" selected="${projOblig.value.status}" />',
        "type": "<sw360:DisplayEnum value='${projOblig.value.obligationType}'/>",
        "id": "<sw360:out value='${projOblig.value.id}'/>",
        "comment": "<sw360:out value='${projOblig.value.comment}'/>",
        "text": '<p style="overflow: auto; max-height: 20rem;">'+obligText+'</p>',
        "modifiedBy": "${projOblig.value.modifiedBy}",
        "modifiedOn": "${projOblig.value.modifiedOn}"
    });
    </core_rt:forEach >
    
    /* create table */
    var projectTable = datatables.create('#project-editObligationsTable', {
        "data": projectObligationJSON,
        "deferRender": false, // do not change this.
        "columns": [
            {
                "className": 'project-details-control',
                "data": null,
                "defaultContent": '&#x25BA'
            },
            { "data": function(row) {
                          return $('<span></span>').html(row.obligation).text();
                      }, render: $.fn.dataTable.render.ellipsis
            },
            { "data": "status", "render": { display: renderStatus } },
            { "data": "type", className: 'text-center obl_type' },
            { "data": "id", className: 'text-center obl_id' },
            { "data": function(row) {
                            return $('<span></span>').html(row.comment).text();
                      }, className: 'obl_comment', defaultContent: "", render: $.fn.dataTable.render.inputText('comment', 'obl_comment toplabelledInput', '<liferay-ui:message key="enter.comments" />')
            },
        ],
        "columnDefs": [
            {
                "targets": 0,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('title', 'click the icon to toggle obligation text');
                }
            },
            {
                "targets": 1,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).css('max-width', '15rem');
                }
            },
            {
                "targets": 5,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $.fn.dataTable.render.inputText.updateTitle(td);
                    $.fn.dataTable.render.inputText.useInputDialog(td, "<liferay-ui:message key="enter.obligation.comment" />");
                    $(td).css('max-width', '15rem');
                }
            }
        ],
        "createdRow": function (row, data, dataIndex, cell) {
            if (data.modifiedBy && data.modifiedOn) {
                $(row).attr('title', '<liferay-ui:message key="modified.by" />: ' + data.modifiedBy + ' | <liferay-ui:message key="modified.on" />: ' + data.modifiedOn);
            }
            $(row).attr('data-text', data.text);
        },
        "order": [[1, 'asc']],
        "buttons": [
            {
                "className": 'd-none',
                "attr": {
                    "id": 'project-updateObligationsButtonHidden',
                    "style": "display: none;"
                },
                "action": projectUpdateObligations
            }
        ],
        "initComplete": datatables.showPageContainer
    }, undefined, [0, 2, 5]);
    
    /* Add event listener for opening and closing individual child row */
    $('#project-editObligationsTable').on('click', 'td.project-details-control', function () {
        render.toggleChildRow($(this), projectTable);
    });

    /* Add event listener for opening and closing all the child rows */
    $('#project-editObligationsTable thead').on('click', 'th.project-more-info', function() {
        render.toggleAllChildRows($(this), projectTable);
    });
    
    //component Obligation
    <core_rt:forEach items="${componentLevelObligations}" var="compOblig" varStatus="loop">
    var obligText = "<sw360:out value='${compOblig.value.text}' stripNewlines='false' jsQuoting='true'/>";
    obligText = obligText.replace(/[\r\n]/g, '<br>');
    obligText = obligText.replace(/\t/g, '&ensp;&ensp;&ensp;&ensp;');
    compObligationJSON.push({
        "obligation": "<sw360:out value='${compOblig.key}'/>",
        "status": '<sw360:DisplayEnumOptions type="<%=ObligationStatus.class%>" selected="${compOblig.value.status}" />',
        "type": "<sw360:DisplayEnum value='${compOblig.value.obligationType}'/>",
        "id": "<sw360:out value='${compOblig.value.id}'/>",
        "comment": "<sw360:out value='${compOblig.value.comment}'/>",
        "text": '<p style="overflow: auto; max-height: 20rem;">'+obligText+'</p>',
        "modifiedBy": "${compOblig.value.modifiedBy}",
        "modifiedOn": "${compOblig.value.modifiedOn}"
    });
    </core_rt:forEach >
    
    /* create table */
    var compTable = datatables.create('#comp-editObligationsTable', {
        "data": compObligationJSON,
        "deferRender": false, // do not change this.
        "columns": [
            {
                "className": 'comp-details-control',
                "data": null,
                "defaultContent": '&#x25BA'
            },
            { "data": function(row) {
                          return $('<span></span>').html(row.obligation).text();
                      }, render: $.fn.dataTable.render.ellipsis
            },
            { "data": "status", "render": { display: renderStatus } },
            { "data": "type", className: 'text-center' },
            { "data": "id", className: 'text-center' },
            { "data": function(row) {
                            return $('<span></span>').html(row.comment).text();
                      }, defaultContent: "", render: $.fn.dataTable.render.inputText('comment', 'obl_comment toplabelledInput', '<liferay-ui:message key="enter.comments" />')
            },
        ],
        "columnDefs": [
            {
                "targets": 0,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).attr('title', 'click the icon to toggle obligation text');
                }
            },
            {
                "targets": 1,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $(td).css('max-width', '15rem');
                }
            },
            {
                "targets": 5,
                "createdCell": function (td, cellData, rowData, row, col) {
                    $.fn.dataTable.render.inputText.updateTitle(td);
                    $.fn.dataTable.render.inputText.useInputDialog(td, "<liferay-ui:message key="enter.obligation.comment" />");
                    $(td).css('max-width', '15rem');
                }
            }
        ],
        "createdRow": function (row, data, dataIndex, cell) {
            if (data.modifiedBy && data.modifiedOn) {
                $(row).attr('title', '<liferay-ui:message key="modified.by" />: ' + data.modifiedBy + ' | <liferay-ui:message key="modified.on" />: ' + data.modifiedOn);
            }
            $(row).attr('data-text', data.text);
        },
        "order": [[1, 'asc']],
        "buttons": [
            {
                "className": 'd-none',
                "attr": {
                    "id": 'comp-updateObligationsButtonHidden',
                    "style": "display: none;"
                },
                "action": compUpdateObligations
            }
        ],
        "initComplete": datatables.showPageContainer
    }, undefined, [0, 2, 5]);
    
    /* Add event listener for opening and closing individual child row */
    $('#comp-editObligationsTable').on('click', 'td.comp-details-control', function () {
        render.toggleChildRow($(this), compTable);
    });

    /* Add event listener for opening and closing all the child rows */
    $('#comp-editObligationsTable thead').on('click', 'th.comp-more-info', function() {
        render.toggleAllChildRows($(this), compTable);
    });
    
    //Org Obligation
    <core_rt:forEach items="${organisationLevelObligations}" var="orgOblig" varStatus="loop">
      var obligText = "<sw360:out value='${orgOblig.value.text}' stripNewlines='false' jsQuoting='true'/>";
      obligText = obligText.replace(/[\r\n]/g, '<br>');
      obligText = obligText.replace(/\t/g, '&ensp;&ensp;&ensp;&ensp;');
      orgObligationJSON.push({
          "obligation": "<sw360:out value='${orgOblig.key}'/>",
          "status": '<sw360:DisplayEnumOptions type="<%=ObligationStatus.class%>" selected="${orgOblig.value.status}" />',
          "type": "<sw360:DisplayEnum value='${orgOblig.value.obligationType}'/>",
          "id": "<sw360:out value='${orgOblig.value.id}'/>",
          "comment": "<sw360:out value='${orgOblig.value.comment}'/>",
          "text": '<p style="overflow: auto; max-height: 20rem;">'+obligText+'</p>',
          "modifiedBy": "${orgOblig.value.modifiedBy}",
          "modifiedOn": "${orgOblig.value.modifiedOn}"
      });
    </core_rt:forEach >
      
      /* create table */
      var orgTable = datatables.create('#org-editObligationsTable', {
          "data": orgObligationJSON,
          "deferRender": false, // do not change this.
          "columns": [
              {
                  "className": 'org-details-control',
                  "data": null,
                  "defaultContent": '&#x25BA'
              },
              { "data": function(row) {
                            return $('<span></span>').html(row.obligation).text();
                        }, render: $.fn.dataTable.render.ellipsis
              },
              { "data": "status", "render": { display: renderStatus } },
              { "data": "type", className: 'text-center' },
              { "data": "id", className: 'text-center obl_id' },
              { "data": function(row) {
                              return $('<span></span>').html(row.comment).text();
                        }, defaultContent: "", render: $.fn.dataTable.render.inputText('comment', 'obl_comment toplabelledInput', '<liferay-ui:message key="enter.comments" />')
              },
          ],
          "columnDefs": [
              {
                  "targets": 0,
                  "createdCell": function (td, cellData, rowData, row, col) {
                      $(td).attr('title', 'click the icon to toggle obligation text');
                  }
              },
              {
                  "targets": 1,
                  "createdCell": function (td, cellData, rowData, row, col) {
                      $(td).css('max-width', '15rem');
                  }
              },
              {
                  "targets": 5,
                  "createdCell": function (td, cellData, rowData, row, col) {
                      $.fn.dataTable.render.inputText.updateTitle(td);
                      $.fn.dataTable.render.inputText.useInputDialog(td, "<liferay-ui:message key="enter.obligation.comment" />");
                      $(td).css('max-width', '15rem');
                  }
              }
          ],
          "createdRow": function (row, data, dataIndex, cell) {
              if (data.modifiedBy && data.modifiedOn) {
                  $(row).attr('title', '<liferay-ui:message key="modified.by" />: ' + data.modifiedBy + ' | <liferay-ui:message key="modified.on" />: ' + data.modifiedOn);
              }
              $(row).attr('data-text', data.text);
          },
          "order": [[1, 'asc']],
          "buttons": [
              {
                  "className": 'd-none',
                  "attr": {
                      "id": 'org-updateObligationsButtonHidden',
                      "style": "display: none;"
                  },
                  "action": orgUpdateObligations
              }
          ],
          "initComplete": datatables.showPageContainer
      }, undefined, [0, 2, 5]);
      
      /* Add event listener for opening and closing individual child row */
      $('#org-editObligationsTable').on('click', 'td.org-details-control', function () {
          render.toggleChildRow($(this), orgTable);
      });

      /* Add event listener for opening and closing all the child rows */
      $('#org-editObligationsTable thead').on('click', 'th.org-more-info', function() {
          render.toggleAllChildRows($(this), orgTable);
      });
      /* collect all the project obligation status */
      function projectUpdateObligations(event, data, node, config) {
          updateprojectCompOrgObligations(event, data, node, config, "<%=ObligationLevel.PROJECT_OBLIGATION%>",projectTable, projectDataMap);
      }

      /* collect all the component obligation status */
      function compUpdateObligations(event, data, node, config) {
          updateprojectCompOrgObligations(event, data, node, config, "<%=ObligationLevel.COMPONENT_OBLIGATION%>",compTable, compDataMap);
      }
      /* collect all the org obligation status */
      function orgUpdateObligations(event, data, node, config) {
          updateprojectCompOrgObligations(event, data, node, config, "<%=ObligationLevel.ORGANISATION_OBLIGATION%>",orgTable, orgDataMap);
          $('#projectEditForm').append('<input id="obligationData" type="hidden" name="<portlet:namespace/><%=PortalConstants.OBLIGATION_DATA%>"/>');

          if (Object.keys(jsonObject).length > 0) {
              $("#obligationData").val(JSON.stringify(jsonObject));
          }
      }

      /* collect all the obligation status */
      function updateprojectCompOrgObligations(event, data, node, config, level, otherObligTable, otherDataMap) {
          let btnData = node.data(),
              date = new Date().toISOString().split('T')[0],
              obligationMap = new Map();

          if (otherDataMap.size < 1) {
              return;
          }

          otherObligTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
              let rowData = this.data(),
                  mapKey = $.parseHTML(rowData.text)[0].nodeValue,
                  ids = [];
              let mapValue = {};
              if (otherDataMap.has(mapKey)) {
                  $node = $(this.node()),
                  mapValue.status = $node.find('select.obl_status option:selected').val();
                  mapValue.comment = $node.find("input.obl_comment").val();
                  mapValue.id=rowData.id;
                  let type=$node.find("td.obl_type").text().trim();
                  mapValue.obligationType=type.length==0?"<%=ObligationType.OBLIGATION%>":type.toUpperCase();
                  mapValue.modifiedOn = date;
                  mapValue.obligationLevel = level;
                  obligationMap.set(mapKey, mapValue);
              }
          });

          let projJsonObject = {};
          for (const [key, value] of obligationMap.entries()) {
              projJsonObject[key] = value;
          }
          jsonObject = Object.assign(projJsonObject, jsonObject);
          obligationMap.clear();
      }

      /* Add event listener for change in any editable fields in project, component, organisation obligation table */
      $("#project-editObligationsTable tbody").on("change", 'td select.obl_status', function () {
          projectCompOrgObligationStoreData($(this), projectDataMap);
      });
      $("#project-editObligationsTable tbody").on("change", 'td input.obl_comment', function () {
          if ($(this).closest('tr').find("input.obl_comment").val()) {
              projectCompOrgObligationStoreData($(this), projectDataMap);
          }
      });
      $("#comp-editObligationsTable tbody").on("change", 'td select.obl_status', function () {
          projectCompOrgObligationStoreData($(this), compDataMap);
      });
      $("#comp-editObligationsTable tbody").on("change", 'td input.obl_comment', function () {
          if ($(this).closest('tr').find("input.obl_comment").val()) {
              projectCompOrgObligationStoreData($(this), compDataMap);
          }
      });
      $("#org-editObligationsTable tbody").on("change", 'td select.obl_status', function () {
          projectCompOrgObligationStoreData($(this), orgDataMap);
      });
      $("#org-editObligationsTable tbody").on("change", 'td input.obl_comment', function () {
          if ($(this).closest('tr').find("input.obl_comment").val()) {
              projectCompOrgObligationStoreData($(this), orgDataMap);
          }
      });
      function projectCompOrgObligationStoreData(thisObj, projectCompOrgObligationDataMap) {
          let $tr = thisObj.closest("tr");
          if (!$tr.hasClass('orphan')) {
              // get obligatoin topic/text from second column (index -> 1) in table.
              projectCompOrgObligationDataMap.set($.parseHTML($tr.attr('data-text'))[0].nodeValue, '');
          }
      }

      function addLicenseObligation() {
          let licensetable = $("#licenseObligationsDetailTable").DataTable(),
              tableModified = false;
          licensetable.rows().every(function (rowIdx, tableLoop, rowLoop) {
              $data = $(this.data());
              $node = $(this.node());
              let selected = $node.find("input.checkbox-control").prop('checked');
              if (selected) {
                  let present = false;
                  table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                      $targetdata = $(this.data());
                      if ($targetdata[0].obligation == $data[0].obligation) {
                          present = true;
                          return false;
                      }
                  });
                  if (!present) {
                      $data[0].status = '<sw360:DisplayEnumOptions type="<%=ObligationStatus.class%>" />';
                      $data[0].added = true;
                      table.row.add($data).draw();
                      dataMap.set("dummy_value", '');
                  }
              }
          });
      }
});
</script>