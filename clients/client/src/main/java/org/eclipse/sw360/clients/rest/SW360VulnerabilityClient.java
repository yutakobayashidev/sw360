/*
 * Copyright Siemens AG, 2021. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.clients.rest;

import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.eclipse.sw360.clients.auth.AccessTokenProvider;
import org.eclipse.sw360.clients.config.SW360ClientConfig;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360ReleaseVulnerabilityRelation;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360Vulnerability;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360VulnerabilityList;
import org.eclipse.sw360.clients.utils.SW360ResourceUtils;
import org.eclipse.sw360.http.RequestBuilder;
import org.eclipse.sw360.http.ResponseProcessor;
import org.eclipse.sw360.http.utils.HttpConstants;
import org.eclipse.sw360.http.utils.HttpUtils;
import org.eclipse.sw360.clients.rest.MultiStatusResponse;

/**
 * <p>
 * An SW360 REST client implementation providing basic functionality related to
 * the {@code /vulnerabilities} endpoint.
 * </p>
 */
public class SW360VulnerabilityClient extends SW360Client {
    /**
     * Tag for the query for a all vulnerabilities.
     */
    static final String TAG_GET_VULNERABILITIES = "get_vulnerabilities";

    /**
     * Tag for the query that searches for vulnerability by external ID.
     */
    static final String TAG_GET_VULNERABILITY_BY_EXTERNAL_IDS = "get_vulnerability_by_external_id";

    /**
     * Tag for the request to create a new vulnerability.
     */
    static final String TAG_CREATE_VULNERABILITY = "post_create_vulnerability";

    /**
     * Tag for the request that modifies a vulnerability.
     */
    static final String TAG_UPDATE_VULNERABILITY = "patch_update_vulnerability";

    /**
     * Tag for the request that deletes vulnerability.
     */
    static final String TAG_DELETE_VULNERABILITY = "delete_vulnerability";

    /**
     * Tag for the request to create a new vulnerability.
     */
    static final String TAG_CREATE_VULNERABILITY_RELEASE_RELATION = "post_create_vulnerability_release_relation";

    /**
     * Tag for the request that deletes vulnerability.
     */
    static final String TAG_DELETE_VULNERABILITY_RELEASE_RELATION = "delete_vulnerability_release_relation";

    private static final String VULNERABILITIES_ENDPOINT_APPENDIX = "vulnerabilities";

    private static final String PATH_RELEASE_VULNERABILITY_RELATION_CREATE = "releaseVulnerabilityRelation";

    private static final String PATH_RELEASE_VULNERABILITY_RELATION_DELETE = "release";

    /**
     * Creates a new instance of {@code SW360VulnerabilityClient} with the passed in
     * dependencies.
     *
     * @param config   the client configuration
     * @param provider the provider for access tokens
     */
    public SW360VulnerabilityClient(SW360ClientConfig config, AccessTokenProvider provider) {
        super(config, provider);
    }

    /**
     * Returns a future with a list of all vulnerabilities
     *
     * @return a future with the list of the vulnerabilities
     */
    public CompletableFuture<List<SW360Vulnerability>> getVulnerabilities() {
        return executeJsonRequestWithDefault(HttpUtils.get(resourceUrl(VULNERABILITIES_ENDPOINT_APPENDIX)),
                SW360VulnerabilityList.class, VULNERABILITIES_ENDPOINT_APPENDIX, SW360VulnerabilityList::new)
                        .thenApply(SW360ResourceUtils::getSw360Vulnerabilities);
    }

    /**
     * Returns a future with detail information about the vulnerability with the
     * given ID. If the vulnerability cannot be found, the future fails with a
     * {@link org.eclipse.sw360.http.utils.FailedRequestException} with
     * status code 404.
     *
     * @param externalId the ID of the vulnerability in question
     * @return a future with details about this vulnerability
     */
    public CompletableFuture<SW360Vulnerability> getVulnerabilityByExternalId(String externalId) {
        return executeJsonRequest(HttpUtils.get(resourceUrl(VULNERABILITIES_ENDPOINT_APPENDIX, externalId)),
                SW360Vulnerability.class, TAG_GET_VULNERABILITY_BY_EXTERNAL_IDS);
    }

    /**
     * Creates a new vulnerability resource based on the data object passed in and
     * returns a future with the result.
     *
     * @param sw360Vulnerability the data object defining the vulnerability to be created
     * @return a future with the resulting entity
     */
    public CompletableFuture<SW360Vulnerability> createVulnerability(SW360Vulnerability sw360Vulnerability) {
        return executeJsonRequest(builder -> builder.method(RequestBuilder.Method.POST)
                .uri(resourceUrl(VULNERABILITIES_ENDPOINT_APPENDIX)).body(body -> body.json(sw360Vulnerability)),
                SW360Vulnerability.class, TAG_CREATE_VULNERABILITY);
    }

    /**
     * Modifies an existing vulnerability based on a data object and returns a future
     * with the result.
     *
     * @param SW360Vulnerability the data object defining the vulnerability to be modified
     *                     and the new properties
     * @return a future with the resulting entity
     */
    public CompletableFuture<SW360Vulnerability> patchVulnerability(SW360Vulnerability sw360Vulnerability,
            String externalId) {
        return executeJsonRequest(
                builder -> builder.method(RequestBuilder.Method.PATCH)
                        .uri(resourceUrl(VULNERABILITIES_ENDPOINT_APPENDIX, externalId))
                        .body(body -> body.json(sw360Vulnerability)),
                SW360Vulnerability.class, TAG_UPDATE_VULNERABILITY);
    }

    /**
     * Triggers a DELETE operation for the vulnerabilities identified by the given
     * IDs.
     *
     * @param externalId of the vulnerability to delete
     * @return a future with the status code {@code Integer} returned by the
     * server
     */
    public CompletableFuture<MultiStatusResponse> deleteVulnerability(String externalId) {
        String url = resourceUrl(VULNERABILITIES_ENDPOINT_APPENDIX, externalId);
        ResponseProcessor<MultiStatusResponse> processor =
                response -> MultiStatusResponse.fromJson(getClientConfig().getObjectMapper(), response.bodyStream());
        return executeRequest(builder -> builder.uri(url).method(RequestBuilder.Method.DELETE),
                HttpUtils.checkResponse(processor, HttpUtils.hasStatus(HttpConstants.STATUS_MULTI_STATUS), TAG_DELETE_VULNERABILITY_RELEASE_RELATION), TAG_DELETE_VULNERABILITY);
    }

    /**
     * Creates a new vulnerability release relation resource based on the data object passed in and
     * returns a future with the result.
     *
     * @param SW360ReleaseVulnerabilityRelation the data object defining the vulnerability release relation to be created
     * @return a future with the resulting entity
     */
    public CompletableFuture<SW360ReleaseVulnerabilityRelation> createVulnerabilityReleaseRelation(String externalId,
            SW360ReleaseVulnerabilityRelation sw360ReleaseVulnerabilityRelation) {
        return executeJsonRequest(
                builder -> builder.method(RequestBuilder.Method.POST)
                        .uri(resourceUrl(VULNERABILITIES_ENDPOINT_APPENDIX, externalId,
                                PATH_RELEASE_VULNERABILITY_RELATION_CREATE))
                        .body(body -> body.json(sw360ReleaseVulnerabilityRelation)),
                SW360ReleaseVulnerabilityRelation.class, TAG_CREATE_VULNERABILITY_RELEASE_RELATION);
    }

    /**
     * Triggers a DELETE operation for the vulnerability release relation identified by the given
     * IDs.
     *
     * @param externalId of the vulnerability in vulnerability release relation to delete
     * @param releaseId of the release in vulnerability release relation to delete
     * @return a future with the {@code Integer} returned by the
     * server
     */
    public CompletableFuture<MultiStatusResponse> deleteVulnerabilityReleaseRelation(String externalId, String releaseId) {
        String url = resourceUrl(VULNERABILITIES_ENDPOINT_APPENDIX, externalId,
                PATH_RELEASE_VULNERABILITY_RELATION_DELETE, releaseId);
        ResponseProcessor<MultiStatusResponse> processor =
                response -> MultiStatusResponse.fromJson(getClientConfig().getObjectMapper(), response.bodyStream());
        return executeRequest(builder -> builder.uri(url).method(RequestBuilder.Method.DELETE),
                HttpUtils.checkResponse(processor, HttpUtils.hasStatus(HttpConstants.STATUS_MULTI_STATUS), TAG_DELETE_VULNERABILITY_RELEASE_RELATION), TAG_DELETE_VULNERABILITY_RELEASE_RELATION);
    }
}
