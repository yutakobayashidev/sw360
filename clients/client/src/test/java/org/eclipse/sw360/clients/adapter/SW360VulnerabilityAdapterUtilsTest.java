/*
 * Copyright Siemens AG, 2021. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.clients.adapter;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360CVEReference;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360ReleaseVulnerabilityRelation;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360VendorAdvisory;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360VerificationState;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360VerificationStateInfo;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360Vulnerability;
import org.junit.Test;

public class SW360VulnerabilityAdapterUtilsTest {

    @Test
    public void validateVulnerabilityWithValidVulnerability() {
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234");

        assertThat(SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability)).isSameAs(vulnerability);
    }

    @Test
    public void ValidateVulnerabilityNoExternalId() {
        SW360Vulnerability vulnerability = new SW360Vulnerability().setDescription("test");

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'externalId'");
        }
    }

    @Test
    public void testIsValidVulnerabilityWithCveReference() {
        Set<String> cveReferences = new HashSet<>();
        cveReferences.add("2021-123");
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setCveReferences(cveReferences);

        assertThat(SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability)).isSameAs(vulnerability);
    }

    @Test
    public void testIsValidVulnerabilityWithCveReferenceEmptyYear() {
        Set<String> cveReferences = new HashSet<>();
        cveReferences.add("-123");
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setCveReferences(cveReferences);

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'year'");
        }
    }

    @Test
    public void testIsValidVulnerabilityWithCveReferenceEmptyNumber() {
        Set<String> cveReferences = new HashSet<>();
        cveReferences.add("2021-");
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setCveReferences(cveReferences);

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'number'");
        }
    }

    @Test
    public void testIsValidVulnerabilityWithCveReferenceInvalidNumber() {
        Set<String> cveReferences = new HashSet<>();
        cveReferences.add("2021-123a");
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setCveReferences(cveReferences);

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("property 'number' should be a valid number");
        }
    }

    @Test
    public void testIsValidVulnerabilityWithCveReferenceInvalidYear() {
        Set<String> cveReferences = new HashSet<>();
        cveReferences.add("2021a-123");
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setCveReferences(cveReferences);

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("property 'year' should be a valid year");
        }
    }

    @Test
    public void testIsValidVulnerabilityWithVendorAdvisories() {
        SW360VendorAdvisory va = new SW360VendorAdvisory().setVendor("vendor").setName("name")
                .setUrl("http://test.com");
        Set<SW360VendorAdvisory> vaList = new HashSet<SW360VendorAdvisory>();
        vaList.add(va);
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setVendorAdvisories(vaList);

        assertThat(SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability)).isSameAs(vulnerability);
    }

    @Test
    public void testIsValidVulnerabilityWithVendorAdvisoriesEmptyName() {
        SW360VendorAdvisory va = new SW360VendorAdvisory().setVendor("vendor").setUrl("http://test.com");
        Set<SW360VendorAdvisory> vaList = new HashSet<SW360VendorAdvisory>();
        vaList.add(va);
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setVendorAdvisories(vaList);

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'name'");
        }
    }

    @Test
    public void testIsValidVulnerabilityWithVendorAdvisoriesEmptyVendor() {
        SW360VendorAdvisory va = new SW360VendorAdvisory().setName("name").setUrl("http://test.com");
        Set<SW360VendorAdvisory> vaList = new HashSet<SW360VendorAdvisory>();
        vaList.add(va);
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setVendorAdvisories(vaList);

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'vendor'");
        }
    }

    @Test
    public void testIsValidVulnerabilityWithVendorAdvisoriesEmptyUrl() {
        SW360VendorAdvisory va = new SW360VendorAdvisory().setName("name").setVendor("vendor");
        Set<SW360VendorAdvisory> vaList = new HashSet<SW360VendorAdvisory>();
        vaList.add(va);
        SW360Vulnerability vulnerability = new SW360Vulnerability().setExternalId("1234").setVendorAdvisories(vaList);

        try {
            SW360VulnerabilityAdapterUtils.validateVulnerability(vulnerability);
            fail("Invalid vulnerability not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'url'");
        }
    }

    @Test
    public void validateReleaseVulnerabilityRelationWithValidReleaseVulnerabilityRelation() {
        SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation = new SW360ReleaseVulnerabilityRelation()
                .setReleaseId("1234");

        assertThat(SW360VulnerabilityAdapterUtils.validateReleaseVulnerabilityRelation(releaseVulnerabilityRelation))
                .isSameAs(releaseVulnerabilityRelation);
    }

    @Test
    public void validateReleaseVulnerabilityRelationNoReleaseId() {
        SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation = new SW360ReleaseVulnerabilityRelation();

        try {
            SW360VulnerabilityAdapterUtils.validateReleaseVulnerabilityRelation(releaseVulnerabilityRelation);
            fail("Invalid releaseVulnerabilityRelation not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'releaseId'");
        }
    }

    @Test
    public void testIsReleaseVulnerabilityRelationWithVerificationStateInfoEmptyCheckedBy() {
        SW360VerificationStateInfo vsi = new SW360VerificationStateInfo().setCheckedOn("2021-06-21")
                .setVerificationState(SW360VerificationState.CHECKED);

        List<SW360VerificationStateInfo> vsiList = new ArrayList<SW360VerificationStateInfo>();
        vsiList.add(vsi);
        SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation = new SW360ReleaseVulnerabilityRelation()
                .setReleaseId("1234").setVerificationStateInfo(vsiList);
        try {
            SW360VulnerabilityAdapterUtils.validateReleaseVulnerabilityRelation(releaseVulnerabilityRelation);
            fail("Invalid releaseVulnerabilityRelation not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'checkedBy'");
        }
    }

    @Test
    public void testIsReleaseVulnerabilityRelationWithVerificationStateInfoEmptyCheckedOn() {
        SW360VerificationStateInfo vsi = new SW360VerificationStateInfo().setCheckedBy("admin@sw360.org")
                .setVerificationState(SW360VerificationState.CHECKED);

        List<SW360VerificationStateInfo> vsiList = new ArrayList<SW360VerificationStateInfo>();
        vsiList.add(vsi);
        SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation = new SW360ReleaseVulnerabilityRelation()
                .setReleaseId("1234").setVerificationStateInfo(vsiList);
        try {
            SW360VulnerabilityAdapterUtils.validateReleaseVulnerabilityRelation(releaseVulnerabilityRelation);
            fail("Invalid releaseVulnerabilityRelation not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'checkedOn'");
        }
    }

    @Test
    public void testIsReleaseVulnerabilityRelationWithVerificationStateInfoEmptyVerificationState() {
        SW360VerificationStateInfo vsi = new SW360VerificationStateInfo().setCheckedOn("2021-06-21")
                .setCheckedBy("admin@sw360.org");

        List<SW360VerificationStateInfo> vsiList = new ArrayList<SW360VerificationStateInfo>();
        vsiList.add(vsi);
        SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation = new SW360ReleaseVulnerabilityRelation()
                .setReleaseId("1234").setVerificationStateInfo(vsiList);
        try {
            SW360VulnerabilityAdapterUtils.validateReleaseVulnerabilityRelation(releaseVulnerabilityRelation);
            fail("Invalid releaseVulnerabilityRelation not detected!");
        } catch (IllegalArgumentException e) {
            assertThat(e.getMessage()).contains("missing property 'verificationState'");
        }
    }

    @Test
    public void testIsReleaseVulnerabilityRelationWithVerificationStateInfo() {
        SW360VerificationStateInfo vsi = new SW360VerificationStateInfo().setCheckedOn("2021-06-21")
                .setCheckedBy("admin@sw360.org").setVerificationState(SW360VerificationState.CHECKED);

        List<SW360VerificationStateInfo> vsiList = new ArrayList<SW360VerificationStateInfo>();
        vsiList.add(vsi);
        SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation = new SW360ReleaseVulnerabilityRelation()
                .setReleaseId("1234").setVerificationStateInfo(vsiList);
        assertThat(SW360VulnerabilityAdapterUtils.validateReleaseVulnerabilityRelation(releaseVulnerabilityRelation))
                .isSameAs(releaseVulnerabilityRelation);
    }
}